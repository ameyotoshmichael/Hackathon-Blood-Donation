{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Class_Hackathon_BloodDonation.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "HTejpXRaZfU-"
      },
      "source": [
        "from datetime import date, timedelta\n",
        "\n",
        "\n",
        "def calc_expiry_date(bleeding_date):\n",
        "    expiry_date = bleeding_date + timedelta(days=14)\n",
        "    return expiry_date\n",
        "\n",
        "\n",
        "class Donor:\n",
        "    def __init__(self):\n",
        "        self.name = None\n",
        "        self.age = None\n",
        "        self.gender = None\n",
        "        self.branch = None\n",
        "        self.blood_group = None\n",
        "        self.bleeding_date = None\n",
        "        self.expiry_date = None\n",
        "        self.utilisation_date = None\n",
        "        self.donate_again = None\n",
        "\n",
        "    def upload_details(self, name, branch, blood_group, age, gender):\n",
        "        self.name = name\n",
        "        self.branch = branch\n",
        "        self.blood_group = blood_group\n",
        "        self.age = age\n",
        "        self.gender = gender\n",
        "        self.bleeding_date = date.today()\n",
        "        self.expiry_date = calc_expiry_date(self.bleeding_date)\n",
        "        self.donate_again = False\n",
        "\n",
        "    def update_utilisation_date(self):\n",
        "        self.utilisation_date = date.today()\n",
        "\n",
        "    def new_donation(self):\n",
        "        self.bleeding_date = date.today()\n",
        "        self.expiry_date = calc_expiry_date(self.bleeding_date)\n",
        "        self.donate_again = False\n",
        "\n",
        "    def check_status(self):\n",
        "        if date.today() < self.bleeding_date + timedelta(days=56):\n",
        "            self.donate_again = False\n",
        "        else:\n",
        "            self.donate_again = True\n",
        "\n",
        "    def get_blood_group(self):\n",
        "        return self.blood_group\n",
        "\n",
        "    def get_branch(self):\n",
        "        return self.branch\n",
        "\n",
        "    def get_name(self):\n",
        "        return self.name\n",
        "\n",
        "    def get_bleedingdate(self):\n",
        "        return self.bleeding_date\n",
        "\n",
        "    def get_expirydate(self):\n",
        "        return self.expiry_date\n",
        "\n",
        "    def get_utilisationdate(self):\n",
        "        return self.utilisation_date\n",
        "\n",
        "    def disp_details(self):\n",
        "        print(f'Name: {self.name}\\nBlood group: {self.blood_group}\\nAge: {self.age}\\nGender: {self.gender}\\n'\n",
        "              f'Branch: {self.branch}\\nDate of donation: {self.bleeding_date}\\n'\n",
        "              f'Date of utilisation: {self.utilisation_date}\\nDate of expiry: {self.expiry_date}')\n",
        "\n",
        "    def request_blood_bag(self):\n",
        "        if self.utilisation_date is None:\n",
        "            print('Status: Available')\n",
        "            self.disp_details()\n",
        "        else:\n",
        "            self.check_status()\n",
        "            if self.donate_again is True:\n",
        "                print(\"Status: Not available but request can be made.\")\n",
        "            else:\n",
        "                print(\"Status: Not available and the user cannot donate any blood at this moment.\")\n",
        "\n",
        "# defining all the lists to be used in the program\n",
        "\n",
        "# for simplification purposes branch names will be in the format branch_number\n",
        "branch = [[], [], [], []]\n",
        "branch_blood_type = [[], [], [], []]\n",
        "\n",
        "# currently set to all blood groups within 10%\n",
        "rare_blood_types_list = ['ab_positive', 'ab_negative', 'b_positive', 'b_negative', 'a_negative']\n",
        "\n",
        "blood_types_dict = {'ab_positive': [],\n",
        "                    'ab_negative': [],\n",
        "                    'b_positive': [],\n",
        "                    'b_negative': [],\n",
        "                    'a_negative': [],\n",
        "                    'a_positive': [],\n",
        "                    'o_positive': [],\n",
        "                    'o_negative': [],\n",
        "                    }\n",
        "\n",
        "\n",
        "def get_details():\n",
        "    donor = Donor()\n",
        "    name = input('Enter the name: ')\n",
        "    Branch = input('Enter the branch name: ')\n",
        "    age = int(input('Enter the age of the donor: '))\n",
        "    gender = input('Enter the gender of the donor: ')\n",
        "    blood_group = input('Enter the blood_group of the donor(type(a,b,ab,o)_sign(positive,negative)): ')\n",
        "    donor.upload_details(name=name, branch=Branch, blood_group=blood_group, age=age, gender=gender)\n",
        "\n",
        "    temp = Branch.split('_')\n",
        "    i = int(temp[1])\n",
        "    branch[i-1].append(donor)\n",
        "    if blood_group not in branch_blood_type[i-1]:\n",
        "        branch_blood_type[i-1].append(blood_group)\n",
        "\n",
        "    if blood_group in blood_types_dict.keys():\n",
        "        blood_types_dict[blood_group].append(donor)\n",
        "\n",
        "# This function updates the utilisation_date\n",
        "def update_details():\n",
        "    name = input('Enter the name: ')\n",
        "    Branch = input('Enter the branch name: ')\n",
        "    blood_group = input('Enter the blood_group of the donor(type(a,b,ab,o)_sign(positive,negative)): ')\n",
        "    temp = Branch.split('_')\n",
        "    i = int(temp[1])\n",
        "    for person in branch[i-1]:\n",
        "        donor_update = person\n",
        "        if donor_update.get_name() == name and donor_update.get_blood_group() == blood_group:\n",
        "            donor_update.update_utilisation_date()\n",
        "            print(\"Donor details updated successfully..\")\n",
        "            return\n",
        "\n",
        "    print(\"Error encountered....\\nPlease ensure that correct details were entered\")\n",
        "\n",
        "# This function makes an update to existing donor provided donation made to the same branch\n",
        "def update_details_new_donation():\n",
        "    name = input('Enter the name: ')\n",
        "    Branch = input('Enter the branch name: ')\n",
        "    blood_group = input('Enter the blood_group of the donor(type(a,b,ab,o)_sign(positive,negative)): ')\n",
        "    temp = Branch.split('_')\n",
        "    i = int(temp[1])\n",
        "    for person in branch[i-1]:\n",
        "        donor_update = person\n",
        "        if donor_update.get_name() == name and donor_update.get_blood_group() == blood_group:\n",
        "            donor_update.new_donation()\n",
        "            print(\"Donor details updated successfully..\")\n",
        "            return\n",
        "\n",
        "    print(\"Error encountered....\\nPlease ensure that correct details were entered\")\n",
        "\n",
        "def get_branch_details():\n",
        "    branch_input = input('Enter the branch name: ')\n",
        "    temp = branch_input.split('_')\n",
        "    branch_index = int(temp[1]) - 1\n",
        "    print(f'Branch Name: {branch_input}\\nNumber of donors: {len(branch[branch_index])}\\n'\n",
        "          f'Types of blood available: {\" \".join(branch_blood_type[branch_index])}\\n')\n",
        "\n",
        "    for person in branch[branch_index]:\n",
        "        donor_branch = person\n",
        "        donor_branch.disp_details()\n",
        "        print(\"\\n\")\n",
        "\n",
        "\n",
        "def get_rare_blood_details():\n",
        "    for blood in rare_blood_types_list:\n",
        "        for person in blood_types_dict[blood]:\n",
        "            rare_blood_donor = person\n",
        "            rare_blood_donor.disp_details()\n",
        "            print('\\n')\n",
        "\n",
        "\n",
        "def request_blood():\n",
        "    blood = input('Enter the type of blood to be requested: ')\n",
        "    for person in blood_types_dict[blood]:\n",
        "        blood_donor = person\n",
        "        blood_donor.request_blood_bag()\n",
        "\n",
        "\n",
        "# to get list of donors who donated blood on a particular date\n",
        "def get_bleeding_date():\n",
        "    date = input('Please enter the date in yyyy-mm-dd format: ')\n",
        "    for br in branch:\n",
        "        for person in br:\n",
        "            blood_donor = person\n",
        "            if str(blood_donor.get_bleedingdate()) == date:\n",
        "                blood_donor.disp_details()\n",
        "                print('\\n')\n",
        "\n",
        "\n",
        "# to get a list of donated blood which is set to expire on a particular date provide it is not utilised\n",
        "def get_expiry_date():\n",
        "    date = input('Please enter the date in yyyy-mm-dd format: ')\n",
        "    for br in branch:\n",
        "        for person in br:\n",
        "            blood_donor = person\n",
        "            if str(blood_donor.get_expirydate()) == date and blood_donor.get_utilisationdate() is None:\n",
        "                blood_donor.disp_details()\n",
        "                print('\\n')\n",
        "\n",
        "\n",
        "# After getting the initial details using get_details() this program can perform many functions\n",
        "# Each get_details() takes information of one blood donor\n",
        "\n",
        "# get_details()\n",
        "# get_details()\n",
        "# get_details()\n",
        "# get_details()\n",
        "\n",
        "# Following funtion returns a list of all donors who gave blood_type present in rare_blood_list\n",
        "# get_rare_blood_details()\n",
        "\n",
        "# If a blood bag is used the following function takes necessary input it updates the utilisation date\n",
        "# update_details()\n",
        "\n",
        "# Following function can give branch specific details\n",
        "\n",
        "# get_branch_details()\n",
        "# get_branch_details()\n",
        "# get_branch_details()\n",
        "\n",
        "# The following function can request blood of specific blood group\n",
        "# In case a blood bag is not available but a request can be made to the user it also prints the details of such user\n",
        "# request_blood()\n",
        "\n",
        "# You can get a list of all donors who donated blood on a particular date\n",
        "# get_bleeding_date()\n",
        "\n",
        "# You can get list of all blood bags set to expire on a particular date provided they are not utilised\n",
        "# get_expiry_date()\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 5,
      "outputs": []
    }
  ]
}